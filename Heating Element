#include <SPI.h>
#include <Wire.h>
#include <OneWire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#define OLED_RESET 4
Adafruit_SSD1306 display(OLED_RESET);
OneWire  ds(2);  // on pin 2 (a 4.7K resistor is necessary)
const int SugarPin  =9;
int HeaterPWM=13;
int voltage_perc;
const int delayTime=1000;
float Temp;
float T_diff=0.0;
float Target_T=90;
int MenuCounter=1;
#if (SSD1306_LCDHEIGHT != 64)
#error("Height incorrect, please fix Adafruit_SSD1306.h!");
#endif

void setup()   {                
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C); 
  display.clearDisplay();
  display.display();
  // define arduino PWM as an output
  pinMode(SugarPin,OUTPUT);
  //define Button as an input with PullUp resistor
  //  pinMode(Sugar_Pot ,INPUT);
  
  MainMenu();
  display.display(); 
  delay(3000); 
  display.clearDisplay();
  display.display();  
  ControlPanel();
}
void MainMenu()
{
  display.setTextSize(3);
  display.setTextColor(WHITE);
  display.setCursor(20,5);  
  display.print("Sugar");      
  display.setCursor(20,35);    
  display.print("Device");    
  delay(3000);
}
void UpdateReading()
{
  display.setTextSize(3);
  display.setCursor(20,30);   
  display.setTextColor(WHITE);  
  switch(MenuCounter)
  {
  case 1:
  display.print(Target_T);    
  break;    
  case 2:
  display.print(Temp);    
  break;
  case 3:
  display.print(voltage_perc);    
  break;  
  }  
  display.display();    
  MenuCounter++;
  if(MenuCounter>3){MenuCounter=1;}
}

void ControlPanel()
{
  display.clearDisplay(); 
  display.display();        
  display.setTextSize(2);
  display.setTextColor(WHITE);
  switch(MenuCounter)
  { 
  case 1:
  display.setCursor(5,5);  
  display.print("Sensor T");        
  break;
  case 2:  
  display.setCursor(5,5);    
  display.print("Target T");    
  break;
  case 3:    
  display.setCursor(5,5);    
  display.print("AC volt%");    
  break;
  }
  display.display();    
}

void loop()
{
 ReadTempSensor();
 delay(500); 
 ControlPanel(); 
 UpdatePWM(); 
 UpdateReading();
}

void UpdatePWM()
{
T_diff=Target_T-Temp;
if(T_diff>=40)
{
 HeaterPWM=64;//full voltage; 
 voltage_perc=100; 
}
else if(T_diff<40&&T_diff>=30 )
{
 HeaterPWM=54;//full voltage; 
 voltage_perc=85;
}
else if(T_diff<30&&T_diff>=20 )
{
 HeaterPWM=48; //60%
 voltage_perc=75; 
}
else if(T_diff<20&&T_diff>=10 )
{
 HeaterPWM=38; //50%
 voltage_perc=50; 
}
else if(T_diff<10&&T_diff>=2 )
{
 HeaterPWM=30; //30%
 voltage_perc=30;
}
else if(T_diff<2 )
{
 HeaterPWM=12; //0%
 voltage_perc=0;
}
analogWrite(SugarPin,HeaterPWM);
}
void ReadTempSensor()
{
  byte i;
  byte present = 0;
  byte type_s;
  byte data[12];
  byte addr[8];
  float celsius, fahrenheit;
  
  if ( !ds.search(addr)) {
    ds.reset_search();
    delay(250);
    return;
  }  

 
  // the first ROM byte indicates which chip
  switch (addr[0]) {
    case 0x10:
      type_s = 1;
      break;
    case 0x28:
      type_s = 0;
      break;
    case 0x22:
      type_s = 0;
      break;
    default:
      return;
  } 

  ds.reset();
  ds.select(addr);
  ds.write(0x44, 1);        // start conversion, with parasite power on at the end
  
  delay(1000);     // maybe 750ms is enough, maybe not
  // we might do a ds.depower() here, but the reset will take care of it.
  
  present = ds.reset();
  ds.select(addr);    
  ds.write(0xBE);         // Read Scratchpad

  for ( i = 0; i < 9; i++) {           // we need 9 bytes
    data[i] = ds.read();
  }

  // Convert the data to actual temperature
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.
  int16_t raw = (data[1] << 8) | data[0];
  if (type_s) {
    raw = raw << 3; // 9 bit resolution default
    if (data[7] == 0x10) {
      // "count remain" gives full 12 bit resolution
      raw = (raw & 0xFFF0) + 12 - data[6];
    }
  } else {
    byte cfg = (data[4] & 0x60);
    // at lower res, the low bits are undefined, so let's zero them
    if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 93.75 ms
    else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187.5 ms
    else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 ms
    //// default is 12 bit resolution, 750 ms conversion time
  }
  celsius = (float)raw / 16.0;
  Temp=celsius;
  fahrenheit = celsius * 1.8 + 32.0;
}
COMMENTS
